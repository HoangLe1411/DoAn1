@model List<DoAn1.Areas.Admin.Models.Product>

@{
    ViewData["Title"] = "Tất Cả Sản Phẩm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/products.css" />
}

<div class="container mt-4">
    <h2 class="mb-4">Tất Cả Sản Phẩm</h2>

    <!-- Bộ lọc -->
    <div class="filter-bar mb-4">
        <span><i class="bi bi-funnel"></i> Lọc:</span>
        <select class="form-select d-inline-block w-auto ms-2" id="locationFilter">
            <option value="">-- Địa điểm --</option>
            <option value="Toàn quốc">Toàn quốc</option>
            <option value="Hà Nội">Hà Nội</option>
            <option value="TP. Hồ Chí Minh">TP. Hồ Chí Minh</option>
            <option value="Cần Thơ">Cần Thơ</option>
        </select>

        <select class="form-select d-inline-block w-auto ms-2" id="categoryFilter">
            <option value="">-- Danh mục --</option>
            <option value="Đồ điện tử">Đồ Điện Tử</option>
            <option value="Đồ gia dụng">Đồ Gia Dụng</option>
            <option value="Thời trang">Thời trang</option>
            <option value="Mẹ và bé">Mẹ & Bé</option>
            <option value="Xe cộ">Xe cộ</option>
            <option value="Sách">Sách</option>
            <option value="Thể thao và giải trí">Thể thao & Giải trí</option>
            <option value="Văn phòng">Văn phòng</option>
            <option value="Đồ khác">Đồ khác</option>
        </select>

        <select class="form-select d-inline-block w-auto ms-2" id="priceFilter">
            <option value="">-- Giá --</option>
            <option value="0-1000000">Dưới 1 triệu</option>
            <option value="1000000-5000000">1 - 5 triệu</option>
            <option value="5000000-10000000">5 - 10 triệu</option>
            <option value="10000000-999999999">Trên 10 triệu</option>
        </select>

        <select class="form-select d-inline-block w-auto ms-2" id="conditionFilter">
            <option value="">-- Tình trạng --</option>
            <option value="new">Mới</option>
            <option value="used">Đã sử dụng</option>
        </select>
    </div>

    <div class="product-list row">
        @foreach (var product in Model)
        {
            var imageUrl = product.ProductImages.FirstOrDefault()?.ImageUrl ?? "/images/no-image.png";
            var price = product.Price ?? 0;
            var location = product.Location ?? "Toàn quốc";
            var category = product.Category?.CategoryName ?? "Đồ khác";
            var condition = product.Condition?.ToLower() == "mới" ? "new" : "used";

            <div class="col-md-3 col-sm-6 mb-4">
                <div class="card h-100"
                     data-location="@location"
                     data-category="@category"
                     data-price="@price"
                     data-condition="@condition">
                    <img src="@imageUrl" class="card-img-top" alt="@product.Title" />
                    <div class="card-body">
                        <h5 class="card-title">@product.Title</h5>
                        <p class="card-text">@string.Format("{0:N0} đ", price)</p>
                        <a href="@Url.Action("DetailProduct", "Products", new { id = product.ProductId })" class="btn btn-outline-primary w-100">Xem chi tiết</a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const locationFilter = document.getElementById('locationFilter');
            const categoryFilter = document.getElementById('categoryFilter');
            const priceFilter = document.getElementById('priceFilter');
            const conditionFilter = document.getElementById('conditionFilter');
            const cards = document.querySelectorAll('.card');

            function applyFilters() {
                let selectedLocation = locationFilter.value;
                let selectedCategory = categoryFilter.value;
                let selectedPrice = priceFilter.value;
                let selectedCondition = conditionFilter.value;

                cards.forEach(card => {
                    let match = true;

                    if (selectedLocation && card.dataset.location !== selectedLocation) {
                        match = false;
                    }

                    if (selectedCategory && card.dataset.category !== selectedCategory) {
                        match = false;
                    }

                    if (selectedCondition && card.dataset.condition !== selectedCondition) {
                        match = false;
                    }

                    if (selectedPrice) {
                        let [minPrice, maxPrice] = selectedPrice.split('-').map(Number);
                        let cardPrice = parseInt(card.dataset.price);
                        if (cardPrice < minPrice || cardPrice > maxPrice) {
                            match = false;
                        }
                    }

                    card.parentElement.style.display = match ? 'block' : 'none';
                });
            }

            locationFilter.addEventListener('change', applyFilters);
            categoryFilter.addEventListener('change', applyFilters);
            priceFilter.addEventListener('change', applyFilters);
            conditionFilter.addEventListener('change', applyFilters);
        });
    </script>
}
